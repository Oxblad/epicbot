import telebot
import random
from telebot import types
import os

token = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(token)
fout = open('message.txt', 'rt', encoding='utf-8')
chat_ids_file = 'chat_id'

lines = fout.readlines()
fout.close()
text = []
for line in lines:
    text.append(line)


def save_chat_id(chat_id):
    # Function add id if no id
    chat_id = str(chat_id)
    with open(chat_ids_file, "a+") as ids_file:
        ids_file.seek(0)

        ids_list = [line.split('\n')[0] for line in ids_file]

        if chat_id not in ids_list:
            ids_file.write(f'{chat_id}\n')
            ids_list.append(chat_id)
        else:
            pass
    return


@bot.message_handler(commands=['start'])
def welcome(message):
    if message.chat.type == 'private':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
        item1 = types.KeyboardButton('–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏üíú')
        markup.add(item, item1)
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —ç—Ç–æ –±–æ—Ç <b>–≠–ø–∏—á–Ω–æ‚ù§Ô∏è</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–Ω—Ç–µ–ª–∏–∫—Ç—É–∞–ª–æ–≤ –¥–ª—è "
                         "–ø–æ–¥–Ω—è—Ç–∏—è –∞–∫—Ç–∏–≤–∞ –≤ —á–∞—Ç–µüòÇ \n - –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É \n - –î–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç—É \n - "
                         "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!", parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def else_text(message):
    if not message.chat.type == "private":
        delete_links(message)
        save_chat_id(message.chat.id)
        rand = random.randint(0, 100)
        if rand <= 4:
            bot.reply_to(message, random.choice(text))
        else:
            pass
    else:

        if message.text == '–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏üíú':
            bot.send_message(message.chat.id,
                             '–ß—Ç–æ —è —É–º–µ—é?‚ù§\n üìû‚òé –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –ª—é–±—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º \n‚≠ê –Ø '
                             '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É—é —á–∞—Ç –æ—Ç —Å–ø–∞–º–∞ –∏ –¥—Ä—É–≥–æ–π —Ñ–∏–∫–Ω–∏ :–ó')
        elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", url='https://qiwi.me/viannedi')

            markup.add(item)
            bot.send_message(message.chat.id,
                             "–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è‚ù§", parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.entities is not None and message.chat.id == message.chat.id)
def delete_links(message):
    for entity in message.entities:
        if entity.type in ["url", "text_link"]:
            bot.delete_message(message.chat.id, message.message_id)
        else:
            return


if __name__ == "__main__":
    bot.infinity_polling()
